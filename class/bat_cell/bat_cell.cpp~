#include "bat_cell.h"
#include<iostream>

//#define DEBUG_CELL

//Bat_cell Contructor
Bat_cell::Bat_cell()
{	
	bat_cap_mAh = 400;//400mAh

	V_max = 4.300;
	Q_max =bat_cap_mAh * 3600; // mAh -> mAseconds

	V_cutoff = 2.500;
	Q_cutoff = 0;	// zero unusable charge

	
	// equal fall in capacity Vs Voltage above V_top voltage
	Q_top = (Q_max/10)  * 8;
	V_top = ((V_max-V_cutoff)*0.8) + V_cutoff;
	
	// very steep fail in voltage Vs capacity below V_nom
	Q_nom = (Q_max /10) * 3;
	V_nom = ((V_max-V_cutoff)*0.5) + V_cutoff;

std::cout << "\n    Q_MAX =" << Q_max;
std::cout << "\n    V_MAX =" << V_max;
std::cout << "\n    Q_TOP =" << Q_top;
std::cout << "\n    V_TOP =" << V_top;
std::cout << "\n    Q_NOM =" << Q_nom;
std::cout << "\n    V_NOM =" << V_nom;	
std::cout << "\n Q_cutoff =" << Q_cutoff;
std::cout << "\n V_cutoff =" << V_cutoff;	

	// 5V
	vol = V_max;
	// 1 ohm series Resistance
	ser_res = 0.99;
	// 10mOhm internal resistance
	int_res = 0.010;
	// SW state OFF by default
	SW_state = 0;
	i_load_mA =0.0;
}

//Bat_cell Destructor

Bat_cell::~Bat_cell(){}

// set capacity
int Bat_cell::set_cap(int _mAh)
{
	if(_mAh > 0)
	{
		bat_cap_mAh =_mAh;
	}
	else
	{ return -1;}
}

float Bat_cell::get_V_cutoff(){return V_cutoff;}
float Bat_cell::get_int_res(){return int_res;}


// get capacity
int Bat_cell::get_cap()
{
		return bat_cap_mAh;
}

// get current load
float Bat_cell::get_i_load()
{
		return i_load_mA;
}

/** set APIs**/
int Bat_cell::set_vol(float v)
{


	if(v <= 0.0)
	{
		//voltage of battery can't be negitive
		return -1; 
	}else
	{
		vol=v;
		return 0;

	}
	
}

int Bat_cell::set_ser_res(float sr)
{
	if(sr < 0.0)
	{
		//battery ser resistance can't be negitive
		return -1; 
	}else
	{
		ser_res=sr;
		return 0;

	}

}

int Bat_cell::set_SW_state(bool sw_s, float load_curr)
{
	// switch has been just turned ON
	if( sw_s )
	{
		// note the time, to be used in get_updated_bat_vol()

		
		if(load_curr < 0)
			return -1;		
		// save the load current, to be used to calculate
		
	//NOTE:: this will cause the voltage to update, along with check for V_cutoff			
		if( (get_updated_bat_vol()) < (V_cutoff))
		return -1;

		i_load_mA	= load_curr;	


	}
	// switch was ON, now turned OFF
	else if( (!sw_s) && (SW_state))
	{
		//Don't change the order here[very IMPORTANT]
		vol = get_updated_bat_vol();
		//update voltage, when SW turns off
		i_load_mA	= 0.0;

	std::cout << " check ";
	}

//update SW state
SW_state =sw_s;

return 0;
	
}

bool Bat_cell::get_SW_state()
{
	return SW_state;
}


/** GET APIs**/
float Bat_cell::get_vol()
{
	return get_updated_bat_vol();
}

float Bat_cell::get_ser_res()
{
	return ser_res;
}

float Bat_cell::get_updated_bat_vol()
{
	long long int Q_at_last_update, Q_drained, Q_now;

	double diff_in_sec;

// convert the last updated voltage value to current bat capacity(mAseconds) 
	Q_at_last_update = convert_V_to_Q(vol);

// get time since the SW turned ON, and multiply by i_load to get drained charge     
	
	time(&time_now);
	diff_in_sec = difftime( time_now, time_on_last_update);

#ifdef DEBUG_CELL
std::cout << " \t time since last update = " << diff_in_sec << "secs";
#endif
	time(&time_on_last_update);	
		
#ifdef DEBUG_CELL
std::cout << " \t i_load_mA" << i_load_mA;
#endif
	Q_drained = (int)(i_load_mA * diff_in_sec);// mAseconds unit

#ifdef DEBUG_CELL
std::cout << " \t Q_drained " << Q_drained << std::endl ;
#endif	

//calculate Q_now
	Q_now =	Q_at_last_update - Q_drained;

#ifdef DEBUG_CELL
std::cout << " \t Q_now " << Q_now << std::endl ;
#endif	

/*
NOTE: 
we are only calculating charge lost when either, 'vol' is read for the bat_cell class object, or when SW is closed or Opened, which is why 'Q_now' can be negitive here, in our calculations, as its just a battery model.
*/

// update voltage based on current capacity	

		vol = convert_Q_to_V(Q_now);


}

double Bat_cell::convert_Q_to_V(long long int _Q)
{
double cal_V;

//std::cout << "\n\n Bat_cell::convert_Q_to_V("<< _Q << ")" << std::endl;
	//capacity can't be lower then Q_cutoff
	if( _Q <= Q_cutoff)
	return V_cutoff;

	if(_Q < Q_nom)
	{


	cal_V = (((double)(V_nom -V_cutoff))* ((double)(_Q - Q_cutoff)) ) / ((double)(Q_nom -Q_cutoff));

	cal_V+=V_cutoff;

	}else if(_Q < Q_top)
	{

	cal_V = ( ((double)(V_top -V_nom)) * ((double)(_Q - Q_nom)) )/ ((double)(Q_top -Q_nom));
	
	cal_V+=V_nom;

	}
	else if(_Q <= Q_max)
	{

	cal_V = ( ( (double)(V_max - V_top) ) * ((double)(_Q - Q_top)) ) / ((double)(Q_max -Q_top));

	cal_V+=V_top;	

	}else
	{

	cal_V =V_max;

	}

//add the V_cutoff after mapping
return cal_V ;
}

long long int Bat_cell::convert_V_to_Q(float _v)
{
long long int cal_Q;

	//voltage can't be lower then V_cutoff
	if( _v < V_cutoff)
	return Q_cutoff;

	if(_v < V_nom)
	{
	cal_Q = (long long int)( ( (_v- V_cutoff) / (V_nom- V_cutoff) ) * (long double)(Q_nom-Q_cutoff) );
	cal_Q+=Q_cutoff;
	}else if(_v < V_top)
	{
		cal_Q = (long long int)( ( (_v- V_nom) / (V_top- V_nom) ) * (long double)(Q_top-Q_nom) );
		cal_Q+=Q_nom;
	}
	else if(_v <= V_max)
	{
		cal_Q = (long long int)( ( (_v- V_top) / (V_max- V_top) ) * (long double)(Q_max-Q_top) );
		cal_Q+=Q_top;
	}else
	{
		cal_Q =Q_max;
	}

return cal_Q;
}


